module SRC.Structure.Token(Token(..), isaz, bracket) where

-- | Intermediate represenation of input. 
-- | Generated by Lexer, processed into Terms by Parser.
data Token =
    V Char  |
    L Char  |
    LB      |
    RB
    deriving Show -- for debug

-- | Application is left associative.
-- | Abstraction is right associative.

-- | Checks whether variable is in legal range
isaz :: Char -> Bool
isaz c = (n >= 97) && (n <= 122)
    where n = fromEnum c

-- | Brackets
bracket :: a => a -> a -> Int -> ([a], [a]) -> Maybe ([a], [a])
bracket _ (_, []) = Nothing 
bracket lb rb 1 (l, (rb:xs)) = Just ((reverse l), xs)
bracket lb rb i (l, (rb:xs)) = bracket lb rb (i-1) (rb:l, xs)
bracket lb rb i (l, (lb:xs)) = bracket lb rb (i+1) (lb:l, xs)
bracket lb rb i (l, (x:xs)) = bracket lb rb i (x:l, xs)